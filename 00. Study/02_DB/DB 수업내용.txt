-- <컬럼 값 산술 연산>
-- 컬럼 값 : 행과 열이 교차되는 테이블의 한 칸(한 셀)에 작성된 값(DATA)

-- !! <오늘 날짜 조회> !!
-- SYSDATE : 시스템 상의 현재 날짜(시간)
-- DUAL(DUmmy tAbLe) : 실제 테이블이 아닌 임시 테이블 용
SELECT SYSDATE FROM DUAL;

-- 어제, 오늘, 내일 조회
-- DATE 타입에 +, - 연산 가능(일 단위)
SELECT SYSDATE-1, SYSDATE, SYSDATE+1 FROM DUAL;

-- 한 시간 후 조회
SELECT SYSDATE, SYSDATE-(1/24) FROM DUAL;

-- 1분 후 조회
SELECT SYSDATE, SYSDATE-(1/24/60) FROM DUAL;

-- 30분 후 조회
SELECT SYSDATE, SYSDATE-(1/24/60*30) FROM DUAL;

-- DATA끼리 연산(미래로 갈 수록 큰 수, 연산 결과는 일 단위로 조회)
SELECT EMP_NAME, HIRE_DATE, (SYSDATE - HIRE_DATE) / 365
FROM EMPLOYEE;




-- <컬럼 별칭 지정>
-- 별칭 지정 방법
-- 1. 컬럼명 AS 별칭 : 문자O, 띄어쓰기X, 특수문자X
-- 2. 컬럼명 AS "별칭" : 문자O, 띄어쓰기O, 특수문자O
-- 3. 컬럼명 별칭 : 문자O, 띄어쓰기X, 특수문자X
-- 4. 컬럼명 "별칭" : 문자O, 띄어쓰기O, 특수문자O

-- EMPLOYEE 테이블에서 이름, 연봉 조회
SELECT EMP_NAME AS "@사원 이름", SALARY * 12 연봉
FROM EMPLOYEE;



-- 리터럴 : 표현되는 값 자체
-- DB에서 리터럴 : 임의로 지정한 값을 기존 테이블에 존재하는 값처럼 사
-- 리터럴 표기법 : ''(홑따옴표, 기본적으로 문자열 의미)
-- cf. "" : 계정명, 비밀번호, 컬럼명, 테이블명 등 값이 아닌 것들에 대한 대소문자 구분




-- <DISTINCT> (별개의, 따로따로)
-- 조회 시 지정된 컬럼에 중복 값을 한 번만 표시할 때 사용
SELECT DISTINCT DEPT_CODE FROM EMPLOYEE;





-- <WHERE 절>
-- 테이블에서 조건을 충족하는 컬럼 값을 가진 행만 조회할 때 사용
-- WHERE 절에는 조건식(결과값이 TRUE/FALSE)을 작성
-- 1. 비교 연산자 : >, >=, <, <=, =(같다, cf. 대입연산자 =:), !=, <>(같지 않다)
-- 2. 논리 연산자 : AND, OR, NOT


-- 컬럼명 BTWEEN A AND B : 컬럼 값이 A이상 B이하인 경우 TRUE
SELECT *
FROM EMPLOYEE
WHERE SALARY [NOT] BETWEEN 3000000 AND 5000000;




-- <NULL 처리 연산>
-- Java에서 NULL : 참조하는 객체가 없다.
-- DB에서   NULL : 컬럼 값이 없다.

-- IS NULL    : 컬럼 값이 NULL인     경우 TRUE
-- IS NOT NLL : 컬럼 값이 NULL이 아닌 경우 TRUE






-- 연결 연산자( || )
-- 여러 값을 하나의 컬럼 값으로 연결하는 연산자
-- (==자바의 문자열 이어쓰기(+))




-- LIKE
-- 비교하려는 값이 특정한 패턴을 만족(TRUE) 시키면 조회하는 연산자
-- 작성법
--		WHERE 컬럼명 LIKE '패턴'
-- 패턴
-- 		1. '%'(포함)
--   	  1) '%A'  : A로 끝나는 문자열
--   	  2) 'A%'  : A로 시작하는 문자열
--   	  3) '%A%' : A를 포함하는 문자열
-- 		2. '_'(글자 수)
--   	  1) 'A_' : A 뒤에 한 글자만 있는 문자열 (ex. A1, AB, A가)
--   	  2) '___A' : A 앞에 세 글자가 있는 문자 (ex. 123A)

-- EMPLOY 테이블에서 이메일 _ 앞이 3글자인 사의 사번, 이름, 이메일 조회
SELECT EMP_ID, EMP_NAME, EMAIL 
FROM EMPLOYEE
WHERE EMAIL LIKE '____%';
-- 문제점: 와일드카드 문자(_)와 패턴에 사용된 일반 문자가 같은 문자여서 구분이 안됨
-- ~> 해결방법: ESCAPE 옵션을 이용하여 일반 문자를 구분
SELECT EMP_ID, EMP_NAME, EMAIL 
FROM EMPLOYEE
WHERE EMAIL LIKE '___$_%' ESCAPE '$'; -- '$' 뒤의 한 글자(_)를 일반 문자로 만듦





-- <WHERE절 날짜(시간) 비교>
-- EMPLOYEE 테이블에서 입사일이 '1990/01/01' ~ '2000/12/31'인 사원의 사번, 이름, 고용일 조회
-- 오라클 DB는 작성된 값('1990/01/01')이 다른 형식의 데이터 타입이어도(CHAR) 
--  표기법이 일치한다면 자동으로 데이터 타입을 변경(DATE)
SELECT EMP_ID, EMP_NAME, HIRE_DATE 
FROM EMPLOYEE
WHERE HIRE_DATE BETWEEN '1990/01/01' AND '2000/12/31' ; 	-- CHAR to DATE

자동 형변환은 CHAR to NUMBER도 가능
WHERE SALARY >= '3000000';					-- CHAR to NUMBER




-- ORDER BY 절
-- SELECT 문의 조회 결과(RESULT SET)를 정렬할때 사용하는 구문
-- SELECT 문의 제일 마지막에 해석된다.
-- 작성법
-- 	 3	SELECT   컬럼명
-- 	 1	FROM     테이블명
--	 2	WHERE    조건식
--	 4	ORDER BY 컬럼명|별칭|순서 [ASC|DSEC] [NULL FIRST|NULL LAST];

-- !주의: WHERE 절에서 별칭|순서는 사용할 수 없다.(해석순서때문)
SELECT EMP_NAME 이름, SALARY * 12 AS 연봉
FROM EMPLOYEE
--WHERE 연봉 >= 5000000; -- ORA-00904: "연봉": 부적합한 식별자
	 WHERE SALARY * 12 >= 5000000
-- ORDER BY SALARY * 12 DESC;
-- ORDER BY 연봉 DESC; -- SELECT 문에서 사용한 별칭 연봉 컬럼을 기준으로 정렬
ORDER BY 2 DESC; -- SELECT 문의 2번 컬럼을 기준으로 정렬


-- NULLS FIRST|LAST
-- NULLS FIRST : 내림차순 기본값
-- NULLS LAST :  오름차순 기본값

-- 전화번호 오름차순 조회
SELECT EMP_NAME 이름, PHONE
FROM EMPLOYEE
ORDER BY PHONE /*NULLS LAST*/ NULLS FIRST; -- NULLS LAST가 오름차순 기본값

-- 전호번호 내림차순 조회
SELECT EMP_NAME 이름, PHONE
FROM EMPLOYEE
ORDER BY PHONE DESC /*NULLS FIRST*/ NULLS LAST; -- NULLS FIRST가 내림차순 기본값




-- <정렬 중첩>
-- 큰 분류를 먼저 정렬하고 내부 분류를 다음에 정렬하는 방식
SELECT EMP_NAME, DEPT_CODE, SALARY 
FROM EMPLOYEE
ORDER BY DEPT_CODE, SALARY DESC; -- 1차 정렬: dept_code, 2차 정렬: salary






-- 함수: 컬럼의 값을 읽어서 연산 결과를 반환
-- 단일행 함수(Single Row Function): N개의 행의 값을 전달하여 N개의 결과를 반환
-- 그룹 함수(Group Function): N개의 행의 값을 하나의 그룹으로 묶어 그룹 수 만큼의 결과를 반환
-- 함수는 SELECT 절, WHERE 절, ORDER BY 절, GROUP BY 절, HAVING 절 사용 가능

/************************************ 단일행 함수 ************************************/

-- <문자열 관련 함수>

-- LENGTH(문자열|컬럼명) : 문자열 길이 반환
-- INSTR(문자열|컬럼명, '찾을 문자열')
-- INSTR(문자열|컬럼명, '찾을 문자열', 찾을 시작 위치)
-- INSTR(문자열|컬럼명, '찾을 문자열', 찾을 시작 위치, 순번)
-- 찾을 시작 위치부터 지정된 순번째에 찾을 문자열의 시작 위치 반환

-- 문자열을 5번째 부터 검색하여 두 번쨰로 찾는 B의 위치 조회
SELECT 'AABAACAABBAAC', INSTR('AABAACAABBAAC', 'B', 5, 2) FROM DUAL; -- 결과: 10




-- SUBSTR(문자열|컬럼명, 시작위치)
-- SUBSTR(문자열|컬럼명, 시작위치, 길이)
-- 문자열을 시작 위치부터 지정된 길이 만큼(길이 미작성 시 끝까지) 잘라내서 반환
SELECT SUBSTR('ABCDEF', 3, 3) FROM DUAL; -- CDE
SELECT SUBSTR('ABCEDF', 3) FROM DUAL; -- CDEF





-- TRIM(문자열|컬럼명)
-- TRIM([BOTH|LEADING|TRAILING] 문자열|컬럼명 FROM 문자열|컬럼명)
-- [옵션]: LEADING(앞쪽), TRAILING(뒤쪽), BOTH(양쪽, 기본값)
-- 주어진 문자열의 앞|뒤|양쪽에 존재하는 지정된 문자열을 제거

-- 문자열 앞뒤 공백 제거, 해당 용도로 가장 많이 사용
SELECT TRIM('     K H     ') FROM DUAL;


-- REPLACE(문자열|컬럼명, 찿을 문자열(SRC), 바꿀 문자열(DST))
-- 찾을 문자열을 바꿀 문자열로 변경하여 문자열 반환





-- <숫자 관련 함수>

-- MOD(숫자|컬럼명, 숫자|컬럼명) : 나머지 값 반환
-- ABS(숫자|컬럼명) : 절댓값
-- CEIL(숫자|컬럼명)  : 올림
-- FLOOR(숫자|컬럼명) : 내림
-- 소숫점 첫째 자리에서 처리하여 정수 결과 반환
-- ROUND(숫자|컬럼명) : 첫번째 소수점에서 반올림하여 정수 반환
-- ROUND(숫자|컬럼명, 소수점위치)
--  1) 소수점위치 > 0 : 소수점위치까지 출력
--  2) 소수점위치 < 0 : 정수 자리수에서 반올림
SELECT 123.456,
	   ROUND(123.456),     -- 123    (소수점 첫째 자리에서 반올림)
	   ROUND(123.456, 2),  -- 123.45 (소수점 둘째 자리까지 표현)
	   ROUND(123.456, 1),  -- 123.5  (소수점 첫째 자리까지 표현)
	   ROUND(123.456, 0),  -- 123    (소수점 0번째 자리까지 표현 -> 정수)
	   ROUND(123.456, -1), -- 120    (소수점 -1번째 자리까지 표현 = 1의 자리 반올림)
	   ROUND(123.456, -2)  -- 100    (소수점 -2번째 자리까지 표현 = 10의 자리 반올림)
FROM   DUAL;


-- TRUNC(숫자|컬럼명) : 잘라내기, 버림, 절삭
-- TRUNC(숫자|컬럼, 소수점 위치) : ROUND()랑 유사하게 작동
SELECT TRUNC(123.456),     -- 123
	   TRUNC(123.456, 1),  -- 123.4
	   TRUNC(123.456, -1)  -- 120
FROM DUAL;

-- !주의 : 내림과 버림은 다르므로 잘 구분해서 사용하자.
SELECT FLOOR(-123.5), TRUNC(-123.5) FROM DUAL;  -- -124, -123






-- <날짜 관련 함수>

-- SYSDATE      : 시스템의 현재 시간(년,월,일,시,분,초) 반환
-- SYSTIMESTAMP : SYSDATE 반환값 + ms 단위 추가
SELECT SYSDATE, SYSTIMESTAMP FROM DUAL;
-- 2023-03-07 12:22:40.000	2023-03-07 12:22:40.688 +0900
-- MONTHS_BETWEEN(날짜, 날짜) : 두 날짜의 개월 수 차이를 반환
-- ADD_MONTH(날짜, 숫자) : 날짜에 숫자 만큼의 개월 수를 더하여 반환
-- LAST_DAY(날짜) : 해당 월의 마지만 날짜를 반환
-- EXTRACT(YEAR|MONTH|DAY FROM 날짜) : 날짜에서 년|월|일을 추출하여 정수로 반환
-- EMPLOYEE 테이블에서 각 사원의 이름, 입사 년, 월, 일 조회 (단, 2000년 이상 입사자만 입사년도 오름차순 조회)




-- <형 변환 함수>
-- 문자열(CHAR) <-> 숫자(NUMBER)
-- 문자열(CHAR) <-> 날짜(DATE)
-- 숫자(NUMBER) --> 날짜(DATE)

-- 숫자 -> 문자열
-- TO_CHAR(날짜|숫자) : 문자열로 변환
-- TO_CHAR(날짜|숫자, 포맷)
-- 포맷 1) 9 : 숫자 한 칸을 의미, 오른쪽 정렬, 빈 칸에 공백 추가
--     2) 0 : 숫자 한 칸을 의미, 오른쪽 정렬, 빈 칸에 0 추가
--     3) L : 현재 시스템이나 DB에 설정된 나라의 화폐기호
--     4) , : 숫자의 자릿수 구분
-- 숫자를 문자열로 바꿀 때 칸 수가 충분하지 않으면 '#'으로 채워짐
SELECT 1234,                -- 1234
	TO_CHAR(1234, '99999'), --  1234
	TO_CHAR(1234, '00000')  -- 01234
FROM DUAL;

SELECT 1000000,
	TO_CHAR(1000000, 'L9999999'),  -- \1000000
	TO_CHAR(1000000, '$9999999'),  -- $1000000
	TO_CHAR(1000000, '$9,999,999') -- $1,000,000
FROM DUAL;





-- 날짜 -> 문자열
-- YY    : 연도(짧게) ex) 23
-- YYYY  : 연도(길게) ex) 2023
-- RR    : 연도(짧게) ex) 23
-- RRRR  : 연도(길게) ex) 2023
-- MM    : 월
-- DD    : 일
-- AM/PM : 오전/오후
-- HH    : 시간(12시간)
-- HH24  : 시간(24시간)
-- MI	 : 분
-- SS	 : 초
-- DAY   : 요일(전체) ex) 월요일, MONDAY (지역에 따라 다름)
-- DY	 : 요일(잛게) ex) 월, MON (지역에 따라 다름)
-- 포맷에 포함되지 않는 글자는 쌍따옴표("") 내부에 작성
-- 의도 : 2023년 03월 07일 화요일
SELECT TO_CHAR(SYSDATE, 'YYYY"년" MM"월" DD"일" DAY') TODAY FROM DUAL;




-- 문자열 -> 날짜
-- TO_DATE(문자열, 숫자)
-- TO_DATE(문자열, 숫자, 포맷)
-- 문자열이나 숫자를 지정된 포맷의 날짜 형식으로 해석하여 DATE 타입으로 반환
SELECT '2023-03-07', TO_DATE('2023-03-07') FROM DUAL;
SELECT TO_DATE('2023년 03월 07일', 'YYYY"년" MM"월" DD"일"') FROM DUAL;

-- 숫자 -> 날짜
SELECT  20230308, TO_DATE(20230308) FROM DUAL;

-- 날짜 패턴 Y, R의 차이점
-- 연도를 짧게 해석하는 경우 
--   1) 50 미만 : Y, R 모두 앞부분에 현재 세기(21c)를 적용
--   2) 50 이상 : Y-현재 세기(21c), R-이전 세기(20c) 적용

-- 의도 : 1945-01-15
SELECT TO_DATE('490115', 'YYMMDD'),
       TO_DATE('490115', 'RRMMDD')
FROM DUAL;

-- 의도 : 1950-01-15
SELECT TO_DATE('500115', 'YYMMDD'),
       TO_DATE('500115', 'RRMMDD')
FROM DUAL;

-- 문자열 -> 숫
-- TO_NUMBER(문자열)
-- TO_NUMBER(문자열, 포맷)
SELECT TO_NUMBER('$1,500', '$9,999') FROM DUAL;


-- <NULL 처리 함수>
-- DB에서 NULL과 연산하는 경우 모든 결과는 NULL

-- NVL(컬럼명, 컬럼값이 NULL일 경우 바꿀 값)
-- 컬럼값이 NULL일 경우 지정된 값으로 변경
-- 해당하는 컬럼과 데이터 타입이 일치하는 값으로만 대치 가능






/************************************ 그룹 함수 ************************************/

-- SUM(숫자가 기록된 컬럼명) : 합계
-- AVG(숫자가 기록된 컬럼명) : 평균
-- MAX(컬럼명) : 해당 컬럼의 최대값
-- MIN(컬럼명) : 해당 컬럼의 최소값
--> 타입 제한 X (숫자 : 대/소, 문자열 : 문자 순서, 날짜 : 과거 < 미래)
-------------------------------------------------------------

-- COUNT(* | 컬럼명) : 조회된 행의 개수를 반환
-- COUNT(*)      : NULL을 포함한 모든 행의 개수를 반환
-- COUNT(컬럼명) : 지정된 컬럼의 값이 NULL인 경우를 제외한 행의 개수를 반환
-- COUNT(DISTINCT 컬럼명)
--   : 지정된 컬럼에서 중복된 값을 제외한 행의 개수를 반환

SELECT COUNT(DEPT_CODE) FROM EMPLOYEE; -- 21 (NULL 제외)

SELECT COUNT(*) FROM EMPLOYEE
WHERE DEPT_CODE IS NOT NULL; -- 이렇게도 가능하다









03_GROUP BY_HAVING.SQL

/* SELECT문 해석 순서 (!!암기 필수!!)
 * 5 : SELECT 컬럼명, 함수, 계산식, 리터럴 [[AS] 별칭]
 * 1 : FROM 테이블명
 * 2 : WHERE 조건식
 * 3 : GROUP BY 그룹으로 묶을 컬럼명|함수
 * 4 : HAVING 그룹함수를 이용한 조건식  (GROUP BY가 있어야 작성 가능!)
 * 6 : ORDER BY 컬럼명|별칭|컬럼순서 정렬방식 [NULLS FIRST|LAST]
 */

-- * GROUP BY 절 : 같은 값들이 여러 개 기록된 행을 하나의 그룹으로 묶음

-- * 그룹 내 그룹(소규모 그룹) 만들기 *

-- EMPLOYEE 테이블에서 부서별로 같은 직급인 사원의 급여합을
-- 부서코드 오름차순으로 조회
SELECT DEPT_CODE, JOB_CODE, SUM(SALARY)
FROM EMPLOYEE
GROUP BY DEPT_CODE, JOB_CODE
--       (큰 그룹) (작은 그룹)
ORDER BY DEPT_CODE;

-- * HAVING 절 : 그룹함수로 조회할 그룹에 대한 조건을 설정할 때 사용

-- 집계 함수
-- GROUP BY절에 작성하여
-- 그룹 별로 산출한 결과를 집계하는 함수
-- ROLLUP, CUBE 가 있음

-- ROLLUP : 그룹별로 중간 집계와 전체 합계를 처리하는 함수
SELECT DEPT_CODE, JOB_CODE, SUM(SALARY) 
FROM EMPLOYEE
GROUP BY ROLLUP(DEPT_CODE, JOB_CODE)
ORDER BY 1;

-- CUBE : 그룹으로 지정된 모든 그룹에 대한 중간 집계와 총 합계를 처리하는 함수
SELECT DEPT_CODE, JOB_CODE, SUM(SALARY) 
FROM EMPLOYEE
GROUP BY CUBE(DEPT_CODE, JOB_CODE)
ORDER BY 1;

-- ***** SET OPERATION(집합 연산) *****

-- 2개 이상의 SELECT 결과(RESULT SET)을 이용해
-- 하나의 결과를 조회하는 연산자

-- 조건에 따른 SELECT 결과가 다른 경우
-- 많이 SELECT를 한번에 조회할 때 유용

-- 집합 연산은 2개 이상의 SELECT 문에 사용 가능
-- (주의사항) 집합 연산에 사용되는 RESULT SET의 타입, 순서, 개수가 동일해야 한다.

-- UNION : 합집합
-- INTERSECT  : 교집합
-- UNION ALL : 합집합 + 교집합 (중복O)
-- MINUS : 차집합

SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE 
WHERE DEPT_CODE = 'D5'
UNION|INTERSECT|UNION ALL|MINUS
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE 
WHERE SALARY > 3000000;




04_JOIN.SQL

/* 
[JOIN 용어 정리]
오라클                               SQL : 1999표준(ANSI)
----------------------------------------------------------------------------------------------------------------
등가 조인		                    내부 조인(INNER JOIN), JOIN USING / ON
                                     + 자연 조인(NATURAL JOIN, 등가 조인 방법 중 하나)
----------------------------------------------------------------------------------------------------------------
포괄 조인 		                    왼쪽 외부 조인(LEFT OUTER), 오른쪽 외부 조인(RIGHT OUTER)
                                    + 전체 외부 조인(FULL OUTER, 오라클 구문으로는 사용 못함)
----------------------------------------------------------------------------------------------------------------
자체 조인, 비등가 조인   	            JOIN ON
----------------------------------------------------------------------------------------------------------------
카테시안(카티션) 곱		            교차 조인(CROSS JOIN)
CARTESIAN PRODUCT

- 미국 국립 표준 협회(American National Standards Institute, ANSI) 미국의 산업 표준을 제정하는 민간단체.
- 국제표준화기구 ISO에 가입되어 있음.
*/
-----------------------------------------------------------------------------------------------------------------

-- JOIN
-- 하나 이상의 테이블에서 데이터를 조회하기 위해 사용.
-- 수행 결과는 하나의 Result Set으로 나옴.

/* 
- 관계형 데이터베이스에서 SQL을 이용해 테이블간 '관계'를 맺는 방법.

- 관계형 데이터베이스는 최소한의 데이터를 테이블에 담고 있어
  원하는 정보를 테이블에서 조회하려면 한 개 이상의 테이블에서 
  데이터를 읽어와야 되는 경우가 많다.
  이 때, 테이블간 관계를 맺기 위한 연결고리 역할이 필요한데,
  두 테이블에서 같은 데이터를 저장하는 컬럼이 연결고리가됨.   
*/

-----------------------------------------------------------------------------------------------------------------

-- 1. 내부 조인(INNER JOIN) ( == 등가 조인(EQUAL JOIN))
--> 연결되는 컬럼의 값이 일치하는 행들만 조인됨.  
-- (== 일치하는 값이 없는 행은 조인에서 제외됨. )

-- 작성 방법 크게 ANSI구문과 오라클 구문 으로 나뉘고 
-- ANSI에서  USING과 ON을 쓰는 방법으로 나뉜다.

-- *ANSI 표준 구문
-- ANSI는 미국 국립 표준 협회를 뜻함, 미국의 산업표준을 제정하는 민간단체로 
-- 국제표준화기구 ISO에 가입되어있다.
-- ANSI에서 제정된 표준을 ANSI라고 하고 
-- 여기서 제정한 표준 중 가장 유명한 것이 ASCII코드이다.

-- *오라클 전용 구문
-- FROM절에 쉼표(,) 로 구분하여 합치게 될 테이블명을 기술하고
-- WHERE절에 합치기에 사용할 컬럼명을 명시한다

-- 1) 연결에 사용할 두 컬럼명이 다른 경우

-- EMPLOYEE 테이블, DEPARTMENT 테이블을 참조하여
-- 사번, 이름, 부서코드, 부서명 조회

-- EMPLOYEE 테이블에 DEPT_CODE컬럼과 DEPARTMENT 테이블에 DEPT_ID 컬럼은 
-- 서로 같은 부서 코드를 나타낸다.
--> 이를 통해 두 테이블이 관계가 있음을 알고 조인을 통해 데이터 추출이 가능.

-- ANSI
-- 연결에 사용할 컬럼명이 다른 경우 ON()을 사용
SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_ID, DEPT_TITLE
FROM EMPLOYEE
JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID);


-- 오라클 (JOIN이라는 단어를 작성하지 않음)
SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_ID, DEPT_TITLE
FROM EMPLOYEE, DEPARTMENT
WHERE DEPT_CODE = DEPT_ID;

-- 2) 연결에 사용할 두 컬럼명이 같은 경우
-- EMPLOYEE 테이블, JOB테이블을 참조하여
-- 사번, 이름, 직급코드, 직급명 조회

-- ANSI
-- 연결에 사용할 컬럼명이 같은 경우 USING(컬럼명)을 사용함
SELECT EMP_ID, EMP_NAME, EMPLOYEE.JOB_CODE, JOB_NAME
FROM EMPLOYEE
JOIN JOB ON(EMPLOYEE.JOB_CODE = JOB.JOB_CODE);
-- SQL Error [918] [42000]: ORA-00918: 열의 정의가 애매합니다

SELECT EMP_ID, EMP_NAME, JOB_CODE, JOB_NAME
FROM EMPLOYEE
JOIN JOB USING(JOB_CODE);

-- 오라클 -> 별칭 사용
-- 테이블 별로 별칭을 등록할 수 있음.
SELECT EMP_ID, EMP_NAME, E.JOB_CODE, JOB_NAME
FROM EMPLOYEE E, JOB J
WHERE E.JOB_CODE = J.JOB_CODE;


-- 2. 외부 조인(OUTER JOIN)

-- 두 테이블의 지정하는 컬럼값이 일치하지 않는 행도 조인에 포함을 시킴
-->  *반드시 OUTER JOIN임을 명시해야 한다.

-- OUTER JOIN과 비교할 INNER JOIN 쿼리문
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE
/*INNER*/ JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);


-- 1) LEFT [OUTER] JOIN  : 합치기에 사용한 두 테이블 중 왼편에 기술된 테이블의 
-- 컬럼 수를 기준으로 JOIN
-- ANSI 표준
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE LEFT /*OUTER*/ JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);
-- 기존 INNER JOIN 결과에
-- JOIN 구문 왼쪽에 작성된 EMPLOYEE 테이블의 행 중에서
-- JOIN 결과에 포함되지 않은 행들도 조회하도록 함.


-- 오라클 구문
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE, DEPARTMENT
WHERE DEPT_CODE = DEPT_ID(+);
-- NULL = D1 ~ D9(+)
-- 왼쪽 테이블 컬럼의 값과, 오른쪽 테이블 컬럼의 값이 일치하지 않아도
-- 억지로 추가해라



-- 2) RIGHT [OUTER] JOIN : 합치기에 사용한 두 테이블 중 
-- 오른편에 기술된 테이블의  컬럼 수를 기준으로 JOIN
-- ANSI 표준
SELECT EMP_NAME, DEPT_CODE, DEPT_ID, DEPT_TITLE
FROM EMPLOYEE RIGHT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);

SELECT EMP_NAME, DEPT_CODE, DEPT_ID, DEPT_TITLE
FROM DEPARTMENT LEFT JOIN EMPLOYEE ON (DEPT_CODE = DEPT_ID);


-- 오라클 구문
SELECT EMP_NAME, DEPT_CODE, DEPT_ID, DEPT_TITLE
FROM EMPLOYEE, DEPARTMENT
WHERE DEPT_CODE(+) = DEPT_ID;



-- 3) FULL [OUTER] JOIN   : 합치기에 사용한 두 테이블이 가진 모든 행을 결과에 포함
-- ** 오라클 구문은 FULL OUTER JOIN을 사용 못함

-- ANSI 표준
SELECT EMP_NAME, DEPT_CODE, DEPT_ID, DEPT_TITLE
FROM EMPLOYEE FULL JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);
-- 양쪽 테이블에서 INNER JOIN에 포함되지 못한 행 모두를 결과에 포함


-- 오라클 구문
SELECT EMP_NAME, DEPT_CODE, DEPT_ID, DEPT_TITLE
FROM EMPLOYEE, DEPARTMENT
WHERE DEPT_CODE(+) = DEPT_ID(+);
-- ORA-01468: outer-join된 테이블은 1개만 지정할 수 있습니다



---------------------------------------------------------------------------------------------------------------

-- 3. 교차 조인(CROSS JOIN == CARTESIAN PRODUCT)
--  조인되는 테이블의 각 행들이 모두 매핑된 데이터가 검색되는 방법(곱집합)
--> NATURAL JOIN 실패 시 결과로 확인 가능
SELECT EMP_NAME, DEPT_CODE, DEPT_ID, DEPT_TITLE
FROM EMPLOYEE
CROSS JOIN DEPARTMENT;


---------------------------------------------------------------------------------------------------------------

-- 4. 비등가 조인(NON EQUAL JOIN)

-- '='(등호)를 사용하지 않는 조인문
--  지정한 컬럼 값이 일치하는 경우가 아닌, 값의 범위에 포함되는 행들을 연결하는 방식

SELECT EMP_NAME, SALARY, E.SAL_LEVEL, S.SAL_LEVEL
FROM EMPLOYEE E
JOIN SAL_GRADE S ON (SALARY BETWEEN MIN_SAL AND MAX_SAL);



---------------------------------------------------------------------------------------------------------------

-- 5. 자체 조인(SELF JOIN)

-- 같은 테이블을 조인.
-- 자기 자신과 조인을 맺음
--> 하나의 테이블 가지고 생각하지 말고
--> 같은 테이블이 2개가 있다고 생각하면 쉬움


-- EMPLOYEE 테이블에서 사번, 이름, 사수사번, 사수이름 조회

-- ANSI 표준
SELECT EMP.EMP_ID, EMP.EMP_NAME, 
	NVL(EMP.MANAGER_ID, '없음'), NVL(MGR.EMP_NAME, '없음')
FROM EMPLOYEE EMP
LEFT JOIN EMPLOYEE MGR ON(EMP.MANAGER_ID = MGR.EMP_ID);



-- 오라클 구문
SELECT EMP.EMP_ID, EMP.EMP_NAME, 
	NVL(EMP.MANAGER_ID, '없음'), NVL(MGR.EMP_NAME, '없음')
FROM EMPLOYEE EMP, EMPLOYEE MGR
WHERE EMP.MANAGER_ID = MGR.EMP_ID(+);


---------------------------------------------------------------------------------------------------------------

-- 6. 자연 조인(NATURAL JOIN)
-- 동일한 타입과 이름을 가진 컬럼이 있는 테이블 간의 조인을 간단히 표현하는 방법
-- 반드시 두 테이블 간의 동일한 컬럼명, 타입을 가진 컬럼이 필요
--> 없을 경우 교차조인이 됨.

SELECT EMP_NAME, JOB_NAME
FROM EMPLOYEE
--JOIN JOB USING(JOB_CODE);
NATURAL JOIN JOB;


-- NATURAL JOIN이 성립되지 않는 경우 -> CROSS JOIN 결과 조회
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE
NATURAL JOIN DEPARTMENT;
-- EMPLOYEE   : DEPT_CODE  CHAR(2)  D1 ~ D9 , NULL
-- DEPARTMENT : DEPT_ID    CHAR(2)  D1 ~ D9

---------------------------------------------------------------------------------------------------------------

-- 7. 다중 조인
-- N개의 테이블을 조회할 때 사용  (순서 중요!)

-- EMPLOYEE, DEPARTMENT, LOCATION 테이블 조인

-- ANSI 표준
SELECT EMP_NAME, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE);

-- * JOIN 순서 중요!!! *
--> 앞선 두 테이블(EMPLOYEE, DEPARTMENT)의 조인 후  
--  조인된 결과에 LOCATION 테이블을 조인


-- 오라클 전용
SELECT EMP_NAME, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE, DEPARTMENT, LOCATION
WHERE DEPT_CODE = DEPT_ID
AND LOCATION_ID = LOCAL_CODE;



-- 조인 순서를 지키지 않은 경우(에러발생)
SELECT *
FROM EMPLOYEE
JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE)
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);




05_DML(INSERT,UPDATE,DELETE).SQL

--- *** DML(Data Manipulation Language) : 데이터 조작 언어
-- 테이블에 값을 삽입하거나(INSERT), 수정하거나(UPDATE), 삭제(DELETE)하는 구문

-- 1. INSERT
-- 테이블에 새로운 행을 추가하는 구문
-- 1)  INSERT INTO 테이블명 VALUES(데이터, 데이터, ...)
-- 테이블에 모든 컬럼에 대한 값을 INSERT할 때 사용
-- INSERT하고자 하는 컬럼이 모든 컬럼인 경우 컬럼명 생략 가능. 단, 컬럼의 순서를 지켜서 VALUES에 값을 기입해야 함
INSERT INTO EMPLOYEE2
VALUES(900, '장채현', '901123-2345678', 
	'jang_ch@kh.or.kr', '01012341234','D1', 'J7', 'S3', 
	4300000, 0.2, 200, SYSDATE, NULL, 'N');
-- 2)  INSERT INTO 테이블명(컬럼명, 컬럼명, 컬럼명,...)
-- VALUES (데이터1, 데이터2, 데이터3, ...);
-- 테이블에 내가 선택한 컬럼에 대한 값만 INSERT할 때 사용
-- 선택안된 컬럼은 값이 NULL이 들어감
INSERT INTO EMPLOYEE2(EMP_NAME, EMP_ID, EMP_NO, EMAIL, PHONE, 
                      DEPT_CODE, JOB_CODE, SAL_LEVEL, SALARY)
VALUES('장채현', 900, '901123-2345678', 'jang_ch@kh.or.kr', '01012341234',
       'D1', 'J7', 'S3', 4300000);  
-- (참고) INSERT시 VALUES 대신 서브쿼리 사용 가능
INSERT INTO EMP_01
SELECT EMP_ID, EMP_NAME, DEPT_TITLE
FROM EMPLOYEE2
LEFT JOIN DEPARTMENT2 ON(DEPT_CODE = DEPT_ID); 

-- 2. UPDATE
-- 테이블에 기록된 컬럼의 값을 수정하는 구문
-- [작성법]
-- UPDATE 테이블명 SET 컬럼명 = 바꿀값 [WHERE 컬럼명 비교연산자 비교값];
UPDATE DEPARTMENT2
SET DEPT_TITLE = '전략기획팀'
WHERE DEPT_ID = 'D9';

-- * 조건절을 설정하지 않고 UPDATE 구문 실행 시 모든 행의 컬럼 값 변경.
---> WHERE 작성을 잘하자!!!

-- * 여러 컬럼을 한번에 수정할 시 콤마(,)로 컬럼을 구분하면됨.
-- D9 / 총무부  -> D0 / 전략기획2팀으로 수정
UPDATE DEPARTMENT2 
SET DEPT_ID = 'D0',
    DEPT_TITLE = '전략기획2팀'
WHERE DEPT_ID = 'D9'; -- 1행 수정

-- * UPDATE시에도 서브쿼리를 사용 가능

-- [작성법]
-- UPDATE 테이블명
-- SET 컬럼명 = (서브쿼리)
UPDATE EMPLOYEE2
SET SALARY = (SELECT SALARY FROM EMPLOYEE2 WHERE EMP_NAME = '유재식'),
    BONUS = (SELECT BONUS FROM EMPLOYEE2 WHERE EMP_NAME = '유재식')
WHERE EMP_NAME = '방명수';

-- * 다중행 다중열 서브쿼리를 이용한 UPDATE문
UPDATE EMPLOYEE2
SET (SALARY, BONUS) = (SELECT SALARY, BONUS
                       FROM EMPLOYEE2
                       WHERE EMP_NAME = '유재식')
WHERE EMP_NAME IN ('노옹철', '전형돈', '정중하', '하동운'); -- 4행 수정



-- 3. MERGE(병합) (참고만 하세요!)

-- 구조가 같은 두 개의 테이블을 하나로 합치는 기능.
-- 테이블에서 지정하는 조건의 값이 존재하면 UPDATE
-- 조건의 값이 없으면 INSERT됨

MERGE INTO EMP_M01 USING EMP_M02 ON(EMP_M01.EMP_ID = EMP_M02.EMP_ID)
WHEN MATCHED THEN
UPDATE SET
EMP_M01.EMP_NAME = EMP_M02.EMP_NAME,
EMP_M01.EMP_NO = EMP_M02.EMP_NO,
EMP_M01.EMAIL = EMP_M02.EMAIL,
EMP_M01.PHONE = EMP_M02.PHONE,
EMP_M01.DEPT_CODE = EMP_M02.DEPT_CODE,
EMP_M01.JOB_CODE = EMP_M02.JOB_CODE,
EMP_M01.SAL_LEVEL = EMP_M02.SAL_LEVEL,
EMP_M01.SALARY = EMP_M02.SALARY,
EMP_M01.BONUS = EMP_M02.BONUS,
EMP_M01.MANAGER_ID = EMP_M02.MANAGER_ID,
EMP_M01.HIRE_DATE = EMP_M02.HIRE_DATE,
EMP_M01.ENT_DATE = EMP_M02.ENT_DATE,
EMP_M01.ENT_YN = EMP_M02.ENT_YN
WHEN NOT MATCHED THEN
INSERT VALUES (EMP_M02.EMP_ID, EMP_M02.EMP_NAME, EMP_M02.EMP_NO,
               EMP_M02.EMAIL, EMP_M02.PHONE, EMP_M02.DEPT_CODE,
               EMP_M02.JOB_CODE, EMP_M02.SAL_LEVEL, EMP_M02.SALARY,
               EMP_M02.BONUS, EMP_M02.MANAGER_ID, EMP_M02.HIRE_DATE,
               EMP_M02.ENT_DATE, EMP_M02.ENT_YN);

SELECT * FROM EMP_M01; 

-- 4. DELETE
-- 테이블의 행을 삭제하는 구문

-- [작성법]
-- DELTE FROM 테이블명 WHERE 조건설정
-- 만약 WHERE 조건을 설정하지 않으면 모든 행이 다 삭제됨
DELETE FROM EMPLOYEE2
WHERE EMP_NAME = '장채현'; -- 1행 삭제

-- 5. TRUNCATE (DDL 입니다! DML 아닙니다!)
-- 테이블의 전체 행을 삭제하는 DDL
-- DELETE보다 수행속도가 더 빠르다.
-- ROLLBACK을 통해 복구할 수 없다.
TRUNCATE TABLE EMPLOYEE3;





06_SUBQUERY.SQL

/*
    * SUBQUERY (서브쿼리)
    - 하나의 SQL문 안에 포함된 또다른 SQL문
    - 메인쿼리(기존쿼리)를 위해 보조 역할을 하는 쿼리문
    -- SELECT, FROM, WHERE, HAVGIN 절에서 사용가능
*/
SELECT EMP_NAME, DEPT_CODE
FROM EMPLOYEE
WHERE DEPT_CODE = (
	SELECT DEPT_CODE
	FROM EMPLOYEE
  	WHERE EMP_NAME = '노옹철');

/*  서브쿼리 유형
    - 단일행 서브쿼리 : 서브쿼리의 조회 결과 값의 개수가 1개일 때 (행1, 열1)
    - 다중행 서브쿼리 : 서브쿼리의 조회 결과 값의 개수가 여러개일 때 (행N, 열1)
    - 다중열 서브쿼리 : 서브쿼리의 SELECT 절에 자열된 항목수가 여러개 일 때 (행1, 열N)
    - 다중행 다중열 서브쿼리 : 조회 결과 행 수와 열 수가 여러개일 때 (행N, 열N)
    - 상관 서브쿼리 : 서브쿼리가 만든 결과 값을 메인 쿼리가 비교 연산할 때 
                                메인 쿼리 테이블의 값이 변경되면 서브쿼리의 결과값도 바뀌는 서브쿼리
    - 스칼라 서브쿼리 : 상관 쿼리이면서 결과 값이 하나인 서브쿼리
   * 서브쿼리 유형에 따라 서브쿼리 앞에 붙은 연산자가 다름
*/

-- 1. 단일행 서브쿼리 (SINGLE ROW SUBQUERY)
--    서브쿼리의 조회 결과 값의 개수가 1개인 서브쿼리 (행1, 열1)
--    단일행 서브쿼리 앞에는 비교 연산자 사용
--    <, >, <=, >=, =, !=/^=/<>
SELECT EMP_ID, EMP_NAME, JOB_CODE, DEPT_CODE, SALARY, HIRE_DATE
FROM EMPLOYEE
WHERE SALARY = (SELECT MIN(SALARY) FROM EMPLOYEE);

-- 메인쿼리 + 서브쿼리(where) + 서브쿼리(from)
-- (복잡하지만 신뢰도있는 정보 조회 가능)

-- 2. 다중행 서브쿼리 (MULTI ROW SUBQUERY)
--    서브쿼리의 조회 결과 값의 개수가 여러행일 때 

/*
    >> 다중행 서브쿼리 앞에는 일반 비교연산자 사용 x
    
    - IN / NOT IN : 여러 개의 결과값 중에서 한 개라도 일치하는 값이 있다면
                    혹은 없다면 이라는 의미(가장 많이 사용!)
    - > ANY, < ANY : 여러개의 결과값 중에서 한개라도 큰 / 작은 경우
                     가장 작은 값보다 큰가? / 가장 큰 값 보다 작은가?
    - > ALL, < ALL : 여러개의 결과값의 모든 값보다 큰 / 작은 경우
                     가장 큰 값 보다 큰가? / 가장 작은 값 보다 작은가?
    - EXISTS / NOT EXISTS : 값이 존재하는가? / 존재하지 않는가?
    
*/

-- 차장 직급의 급여의 가장 큰 값보다 많이 받는 과장 직급의 직원
SELECT EMP_ID, EMP_NAME, JOB_NAME, SALARY
FROM EMPLOYEE
JOIN JOB USING(JOB_CODE)
WHERE JOB_NAME = '과장'
AND SALARY > ALL (
	SELECT SALARY
	FROM EMPLOYEE
	JOIN JOB USING(JOB_CODE)
	WHERE JOB_NAME = '차장');



-- 3. 다중열 서브쿼리 (단일행 = 결과값은 한 행)
--    서브쿼리 SELECT 절에 나열된 컬럼 수가 여러개 일 때

-- 퇴사한 여직원과 같은 부서, 같은 직급에 해당하는 사원
SELECT EMP_NAME, JOB_NAME, DEPT_TITLE, HIRE_DATE
FROM EMPLOYEE
NATURAL JOIN JOB 
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE (DEPT_TITLE, JOB_NAME) = (
	SELECT DEPT_TITLE, JOB_NAME
	FROM EMPLOYEE 
	NATURAL JOIN JOB
	JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
	WHERE ENT_YN = 'Y'
	AND SUBSTR(EMP_NO,8,1) = '2');

-- 4. 다중행 다중열 서브쿼리
--    서브쿼리 조회 결과 행 수와 열 수가 여러개 일 때
SELECT EMP_ID, EMP_NAME, JOB_CODE, SALARY
FROM EMPLOYEE 
WHERE (JOB_CODE, TRUNC(SALARY, -4)) IN (
	SELECT JOB_CODE, TRUNC(AVG(SALARY), -4)
	FROM EMPLOYEE 
	GROUP BY JOB_CODE);

-- 5. 상관(상호연관) 서브쿼리
--   상관쿼리는 메인쿼리가 사용하는 테이블값을 서브쿼리가 이용해서 결과를 만듦
--   메인쿼리의 테이블값이 변경되면 서브쿼리의 결과값도 바뀌게 되는 구조임
--   먼저 메인쿼리 한 행을 조회하고 해당 행이 서브쿼리의 조건을 충족하는지 확인하여 SELECT를 진행함

-- 사수가 있는 직원의 사번, 이름, 부서명, 사수사번 조회
-- EXISTS : 서브쿼리에서 조회된 결과가 일치하는 행이 메인쿼리에 하나라도 있으면 조회 결과에 포함
--          (서브쿼리 조회 결과가 1행 이상이면 메인쿼리 행을 결과에 포함)
SELECT EMP_ID, EMP_NAME, DEPT_TITLE, MANAGER_ID
FROM EMPLOYEE MAIN
LEFT JOIN DEPARTMENT ON(DEPT_ID = DEPT_CODE)
WHERE EXISTS (
	SELECT EMP_ID FROM EMPLOYEE SUB
	WHERE SUB.EMP_ID = MAIN.MANAGER_ID);

-- 6. 스칼라 서브쿼리
--    SELECT절에 사용되는 단일행 서브쿼리 결과(1행만 반환)
--    SQL에서 단일 값을 가르켜 '스칼라'라고 함
--    상관쿼리와 자주 같이 사용됨
-- 각 직원들이 속한 직급의 급여 평균 조회
SELECT EMP_NAME, JOB_CODE, SALARY, (
	SELECT FLOOR(AVG(SALARY))
	FROM EMPLOYEE S
	WHERE S.JOB_CODE = M.JOB_CODE) "급여 평균"
FROM EMPLOYEE M;



-- 7. 인라인 뷰(INLINE-VIEW)
--    FROM 절에서 서브쿼리를 사용하는 경우로
--    서브쿼리가 만든 결과의 집합(RESULT SET)을 테이블 대신에 사용한다.

-- INLINE : SQL
-- VIEW : 조회 목적의 가상 테이블(원하는 컬럼만 작성)

-- 인라인뷰를 활용한 TOP-N분석
-- 전 직원 중 급여가 높은 상위 5명의
-- 순위, 이름, 급여 조회




-- * 조건절에 ROWNUM 사용 시 주의사항
-- 조건절에 ROWNUM을 작성하는 경우 조건 범위 내에 1번행이 반드시 포함되어야 한다.
SELECT EMP_NAME, ROWNUM
FROM EMPLOYEE
WHERE ROWNUM = 5;
--> 조회 결과 없음 (조회 결과에 ROWNUM이 붙는거라 1개뿐인 결과에 ROWNUM=5가 붙을 수 없음)
SELECT EMP_NAME, ROWNUM
FROM EMPLOYEE
WHERE ROWNUM = 5 OR ROWNUM = 1;
--> 1행만 조회됨
--> EMPLOYEE 테이블 상단에 위치한 5명을 조회하여 그 5명 안에서 정렬
--> 문제원인 : SELECT 해석 순서 상 ORDER BY가 가장 마지막으로 해석되기 때문에 
--           급여 상위 5명이라는 의도와 맞지 않는 형태로 조회됨
--> 해결방법 : 인라인뷰(FROM절에 작성되는 서브쿼리)를 이용하여 해결
SELECT ROWNUM, EMP_NAME, SALARY
FROM (
	SELECT EMP_NAME, SALARY
	FROM EMPLOYEE
	ORDER BY SALARY DESC) -- 인라인 뷰: 조회 결과(RESULT SET)를 가상의 테이블인 뷰(VIEW)로 이용(행 순서, 컬럼 그대로 이용)
WHERE ROWNUM <= 5;
-- * 인라인 뷰 사용 시 컬럼명에 유의해야 한다.
-- 메인 쿼리에서 인라인 뷰의 컬럼명을 그대로 사용해야 한다.


-- 8. WITH
--    서브쿼리에 이름을 붙여주고 사용시 이름을 사용하게 함
--    인라인뷰로 사용될 서브쿼리에 주로 사용됨
--    ***실행 속도도 빨라진다***는 장점이 있다. (SQL 실행 시 WITH절을 가장 먼저 수행)

-- 전 직원의 급여 순위 
SELECT ROWNUM, EMP_NAME, SALARY
FROM (
	SELECT EMP_NAME, SALARY
	FROM EMPLOYEE 
	ORDER BY SALARY DESC);

--  WITH를 이용해서 MAIN 쿼리를 깔끔하게 정리
WITH TOP_SALARY AS (
	SELECT EMP_NAME, SALARY
	FROM EMPLOYEE 
	ORDER BY SALARY DESC)
SELECT ROWNUM, EMP_NAME, SALARY 
FROM TOP_SALARY;



-- 9. RANK() OVER / DENSE_RANK() OVER
-- SELECT 절에만 사용 가능
-- RANK() OVER : 동일한 순위 이후의 등수를 동일한 인원 수 만큼 건너뛰고 순위 계산
--               EX) 공동 1위가 2명이면 다음 순위는 2위가 아니라 3위

SELECT EMP_NAME, SALARY, RANK() OVER(ORDER BY SALARY DESC) 순위
FROM EMPLOYEE
WHERE RANK() OVER(ORDER BY SALARY DESC) <= 5;
--> ORA-30483: 윈도우 함수를 여기에 사용할 수 없습니다
--> WHERE 절에서 사용할 수 없음(SELECT 절에서만 사용 가능)

-- DENSE_RANK() OVER : 동일한 순위 이후의 등수를 이후의 순위로 계산
--                     EX) 공동 1위가 2명이어도 다음 순위는 2위
SELECT EMP_NAME, SALARY, DENSE_RANK() OVER(ORDER BY SALARY DESC) 순위
FROM EMPLOYEE;






07_TCL.SQL


-- TCL(TRANSACTION CONTROL LANGUAGE) : 트랜잭션 제어 언어
-- COMMIT(트랜잭션 종료 후 저장), ROLLBACK(트랜잭션 취소), SAVEPOINT(임시저장)

-- DML : 데이터 조작 언어로 데이터의 삽입(INSERT), 수정(UPDATE), 삭제(DELETE)
--> 트랜잭션은 DML과 관련되어 있음.


/* TRANSACTION이란?
 - 데이터베이스의 논리적 연산 단위
 
 - 데이터 변경 사항을 묶어 하나의 트랜잭션에 담아 처리함.

 - 트랜잭션의 대상이 되는 데이터 변경 사항 : INSERT, UPDATE, DELETE (DML)
 
 EX) INSERT 수행 --------------------------------> DB 반영(X)
   
     INSERT 수행 --> 트랜잭션에 추가 --> COMMIT --> DB 반영(O)
     
     INSERT 10번 수행 --> 1개 트랜잭션에 10개 추가 --> ROLLBACK --> DB 반영 안됨


    1) COMMIT : 메모리 버퍼(트랜잭션)에 임시 저장된 데이터 변경 사항을 DB에 반영
    
    2) ROLLBACK : 메모리 버퍼(트랜잭션)에 임시 저장된 데이터 변경 사항을 삭제하고
                 마지막 COMMIT 상태로 돌아감.
                
    3) SAVEPOINT : 메모리 버퍼(트랜잭션)에 저장 지점을 정의하여
                   ROLLBACK 수행 시 전체 작업을 삭제하는 것이 아닌
                   저장 지점까지만 일부 ROLLBACK 
    
    [SAVEPOINT 사용법]
    
    SAVEPOINT 포인트명1;
    ...
    SAVEPOINT 포인트명2;
    ...
    ROLLBACK TO 포인트명1; -- 포인트1 지점 까지 데이터 변경사항 삭제

*/








